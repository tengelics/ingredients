{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","serving","ingredientName","ingredientAmount","result","recalculateIngredients","body","multiplier","servings","base","ingredients","some","ingr","name","Number","amount","title","Math","floor","forEach","ingredient","id","unit","ceil","round","push","setState","console","log","this","className","style","display","flexDirection","alignItems","width","fontSize","fontWeight","border","borderRadius","value","type","min","max","onChange","e","target","justifyContent","disabled","selected","map","ing","onClick","JSON","stringify","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.639110d6.chunk.js","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n  state = {\n    serving: '',\n    ingredientName: '',\n    ingredientAmount: '',\n    result: {},\n  };\n\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n\n  recalculateIngredients = (\n    body,\n    serving = '',\n    ingredientName = '',\n    ingredientAmount = ''\n  ) => {\n    let multiplier = 1;\n    if (serving !== '') {\n      multiplier = serving / body.servings;\n    } else if (ingredientName !== '' && ingredientAmount !== '') {\n      const base = (() => {\n        let base = 0;\n        body.ingredients.some((ingr) => {\n          if (ingr.name === ingredientName) {\n            base = Number(ingr.amount);\n            return true;\n          } else {\n            return false;\n          }\n        });\n        return base;\n      })();\n      multiplier = ingredientAmount / base;\n    }\n    const result = {};\n    result.title = body.title;\n    result.servings = Math.floor(body.servings * multiplier)\n      ? Math.floor(body.servings * multiplier)\n      : 1;\n    result.ingredients = [];\n    body.ingredients.forEach((ingredient, id) => {\n      if (ingredient.unit === 'piece') {\n        ingredient.amount = Math.ceil(ingredient.amount * multiplier);\n      } else {\n        ingredient.amount =\n          Math.round(ingredient.amount * multiplier * 100) / 100;\n      }\n      result.ingredients.push(ingredient);\n    });\n    this.setState({ result });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'flex-start',\n              width: '170px',\n            }}\n          >\n            <div style={{ fontSize: '12px', fontWeight: 'bold' }}>\n              Modify serving\n            </div>\n            <input\n              style={{\n                border: '1px solid gray',\n                borderRadius: '5px',\n                width: '100%',\n              }}\n              value={this.state.serving}\n              type=\"number\"\n              min=\"1\"\n              max=\"1000\"\n              onChange={(e) => {\n                this.setState({\n                  serving: e.target.value,\n                  ingredientName: '',\n                  ingredientAmount: '',\n                });\n              }}\n            ></input>\n          </div>\n          <div\n            style={{\n              width: '100px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            OR\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'flex-start',\n              width: '170px',\n            }}\n          >\n            <div style={{ fontSize: '12px', fontWeight: 'bold' }}>\n              Modify ingredient\n            </div>\n            <select\n              style={{\n                border: '1px solid gray',\n                borderRadius: '5px',\n                width: '100%',\n              }}\n              onChange={(e) => {\n                this.setState({\n                  serving: '',\n                  ingredientName: e.target.value,\n                });\n              }}\n              value={this.state.ingredientName}\n            >\n              <option value=\"\" disabled selected>\n                Select ingredient\n              </option>\n              {{\n                title: 'Pancake',\n                servings: 4,\n                ingredients: [\n                  {\n                    name: 'fluor',\n                    amount: 20,\n                    unit: 'dkg',\n                  },\n                  {\n                    name: 'egg',\n                    amount: 2,\n                    unit: 'piece',\n                  },\n                  {\n                    name: 'milk',\n                    amount: 3,\n                    unit: 'dl',\n                  },\n                  {\n                    name: 'carbonated mineral water',\n                    amount: 2,\n                    unit: 'dl',\n                  },\n                  {\n                    name: 'salt',\n                    amount: 1,\n                    unit: 'pinch',\n                  },\n                  {\n                    name: 'oil',\n                    amount: 0.75,\n                    unit: 'dl',\n                  },\n                  {\n                    name: 'oil for cooking',\n                    amount: 1,\n                    unit: 'dl',\n                  },\n                ],\n              }.ingredients.map((ing, id) => {\n                return <option value={ing.name}>{ing.name}</option>;\n              })}\n            </select>\n            <div style={{ fontSize: '12px', fontWeight: 'bold' }}>\n              To amount\n            </div>\n            <input\n              style={{\n                border: '1px solid gray',\n                borderRadius: '5px',\n                width: '100%',\n              }}\n              type=\"number\"\n              min=\"1\"\n              max=\"1000\"\n              onChange={(e) => {\n                this.setState({\n                  serving: '',\n                  ingredientAmount: e.target.value,\n                });\n              }}\n              value={this.state.ingredientAmount}\n            ></input>\n          </div>\n        </div>\n        <button\n          onClick={() => {\n            this.recalculateIngredients(\n              {\n                title: 'Pancake',\n                servings: 4,\n                ingredients: [\n                  {\n                    name: 'fluor',\n                    amount: 20,\n                    unit: 'dkg',\n                  },\n                  {\n                    name: 'egg',\n                    amount: 2,\n                    unit: 'piece',\n                  },\n                  {\n                    name: 'milk',\n                    amount: 3,\n                    unit: 'dl',\n                  },\n                  {\n                    name: 'carbonated mineral water',\n                    amount: 2,\n                    unit: 'dl',\n                  },\n                  {\n                    name: 'salt',\n                    amount: 1,\n                    unit: 'pinch',\n                  },\n                  {\n                    name: 'oil',\n                    amount: 0.75,\n                    unit: 'dl',\n                  },\n                  {\n                    name: 'oil for cooking',\n                    amount: 1,\n                    unit: 'dl',\n                  },\n                ],\n              },\n              this.state.serving,\n              this.state.ingredientName,\n              this.state.ingredientAmount\n            );\n          }}\n        >\n          Recalculate ingredients\n        </button>\n        <pre>{JSON.stringify(this.state.result, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}